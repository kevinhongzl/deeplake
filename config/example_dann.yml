device: cuda
dev: true
deterministic: false

ct_data:
    class_path: lib.datasets.amos.AmosCtDataset
    init_args:
        in_use: true
        root_dir: C:/Users/User/Desktop/TSM_Project/data/amos22
        num_classes: 16
        train_background_classes: [0, 1, 3, 5, 7 ,9, 11, 13, 15]
        test_background_classes: [0]
        train_transform: lib.datasets.amos_default_transform.train_transform
        test_transform: lib.datasets.amos_default_transform.test_transform
        holdout_ratio: 0.1  
        cache_rate: 1
        num_workers: 2
        train_batch_size: 1
        return_dataloader: true
        dev: ${dev}

mr_data:
    class_path: lib.datasets.amos.AmosMrDataset
    init_args:
        in_use: true
        sequence: null
        root_dir: C:/Users/User/Desktop/TSM_Project/data/amos22
        num_classes: 16
        train_background_classes: [0, 2, 4, 6, 8, 10, 12, 14]
        test_background_classes: [0]
        train_transform: lib.datasets.amos_default_transform.train_transform
        test_transform: lib.datasets.amos_default_transform.test_transform
        holdout_ratio: 0.1  
        cache_rate: 1
        num_workers: 2
        train_batch_size: 1
        return_dataloader: true
        dev: ${dev}

module:
    class_path: modules.dann.DANNModule
    init_args:
        feat_extractor:
            class_path: networks.unet.BasicUNetEncoder
            init_args:
                spatial_dims: 3
                in_channels: 1
        predictor:
            class_path: networks.unet.BasicUNetDecoder
            init_args:
                spatial_dims: 3
                out_channels: ${ct_data.init_args.num_classes}
        dom_classifier:
            class_path: networks.dom_classifier.Classifier
        ct_criterion: 
            class_path: lib.loss.target_adaptative_loss.TargetAdaptativeLoss
            init_args:
                num_classes: ${ct_data.init_args.num_classes}
                background_classes: ${ct_data.init_args.train_background_classes}
        mr_criterion: 
            class_path: lib.loss.target_adaptative_loss.TargetAdaptativeLoss
            init_args:
                num_classes: ${mr_data.init_args.num_classes}
                background_classes: ${mr_data.init_args.train_background_classes}
        optimizer: AdamW
        lr: 0.0001
        roi_size: [96, 96, 96]
        sw_batch_size: 2
        pretrained: null
        device: ${device}

updater:
    class_path: modules.dann.DANNUpdater
    init_args:
        sampling_mode: sequential

trainer:
    class_path: modules.dann.DANNTrainer
    init_args:
        max_iter: 10
        eval_step: 10
        metric:
            class_path: monai.metrics.DiceMetric
            init_args:
                include_background: true
                reduction: mean
                get_not_nans: false
        checkpoint_dir: ./checkpoints/
        device: ${device}
        dev: ${dev}

evaluator:
    class_path: modules.base_validator.BaseValidator
    init_args:
        metric:
            class_path: monai.metrics.DiceMetric
            init_args:
                include_background: true
                reduction: mean
                get_not_nans: false
        device: ${device}
    



    


